1- WHO IS THE SENIOR MOST EMPLOYEE BASED ON JOB TITLE?

SELECT * FROM EMPLOYEE
ORDER BY LEVELS DESC
LIMIT 1


2- WHICH COUNTRY HAVE THE MOST INVOICES?

SELECT BILLING_COUNTRY, TOTAL FROM iNVOICE
ORDER BY TOTAL DESC
LIMIT 1;

3- WHAT ARE THE TOP3 VALUES OF TOTAL INVOICE?

SELECT TOTAL FROM INVOICE
ORDER BY TOTAL DESC
LIMIT 3;

4- WHICH CITY HAS THE BEST CUSTOMERS?WE WOULD LIKE TO THROW A PROMOTIONAL MUSIC FESTIVAL IN THE CITY WE MADE THE MOST MONEY. WRITE A QUERY THAT RETURNS ONE CITY THAT HAS THE HIGHEST SUM OF INVOICE TOTALS. RETURN BOTH CITY NAME AND SUM OF ALL INVOICE TOTALS?

SELECT SUM(TOTAL) AS INVOICE_TOTAL, BILLING_CITY  FROM INVOICE
GROUP BY BILLING_CITY
ORDER BY INVOICE_TOTAL DESC
LIMIT 1;


5- WHO IS THE BEST CUSTOMER? THE CUSTOMER WHO HAS SPENT THE MOST MONEY WILL BE DECLARED THE BEST CUSTOMER. WRITE A QUERY THAT RETURNS THE PERSON WHO HAS SPENT THE MOST MONEY.

SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, SUM(INVOICE.TOTAL) AS TOTAL
FROM CUSTOMER
JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
GROUP BY CUSTOMER.CUSTOMER_ID
ORDER BY TOTAL DESC
LIMIT 1;

6- WRITE A QUERY TO RETURN THE EMAIL, FIRST NAME, LAST NAME AND GENRE OF ALL ROCK MUSIC LISTENERS. RETURN YOUR LIST ORDERED ALPHABETICALLY BY EMAIL STARTING WITH A.


SELECT  CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, CUSTOMER.EMAIL
FROM CUSTOMER
WHERE SUPPORT_REP_ID = 1
ORDER BY EMAIL ASC;
SELECT * FROM CUSTOMER

7- lETS INVITE THE ARTISTS WHO HAVE WRITTEN THE MOST ROCK MUSIC. WRITE A QUERY THAT RETURNS THE ARTIST NAME AND TOTAL TRACK COUNT OF THE TOP 10 ROCK BANDS.

SELECT ARTIST.ARTIST_ID, ARTIST.NAME, COUNT(TRACK.TRACK_ID) AS NUMBER_OF_SONGS
FROM TRACK
JOIN ALBUM ON ALBUM.ALBUM_ID = TRACK.ALBUM_ID
JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM.ARTIST_ID
JOIN GENRE ON TRACK.GENRE_ID = GENRE.GENRE_ID
WHERE GENRE.NAME LIKE 'ROCK'
GROUP BY ARTIST.ARTIST_ID, ARTIST.NAME
ORDER BY NUMBER_OF_SONGS DESC
LIMIT 10;

8- RETURN ALL THE TRACK NAMES THAT HAVE A SONG LENGTH LONGER THAN THE AVERAGE  SONG LENGTH. RETURN THE NAME AND MILLISECOND FOR EACH TRACK. ORDER THE SONGS WITH THE LONGEST SONG LISTED FIRST.

SELECT NAME, MILLISECONDS FROM TRACK
WHERE MILLISECONDS > (
SELECT AVG(MILLISECONDS) AS AVG_LENGTH
FROM TRACK
)
ORDER BY MILLISECONDS DESC;
